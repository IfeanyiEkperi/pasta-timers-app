{"version":3,"sources":["selectors/favorites.js","selectors/timers.js","components/Timer.js","selectors/producers.js","containers/Timers.js"],"names":["favoritesSelector","state","favorites","timersAsObjectSelector","timers","timersSelector","createSelector","timersObject","map","timer","id","assign","useStyles","makeStyles","theme","button","width","avatar","backgroundColor","palette","primary","main","image","display","height","backgroundSize","backgroundPosition","time","alignItems","marginRight","Timer","title","subtitle","suptitle","label","link","icon","onClick","classes","className","style","backgroundImage","href","target","rel","secondary","variant","edge","aria-label","producersSelector","uniq","producer","chip","opacity","margin","Preferences","t","useTranslation","dispatch","useDispatch","useSelector","producers","useState","searchValue","setSearchValue","selectValue","setSelectValue","length","TextField","placeholder","fullWidth","InputLabelProps","shrink","value","onChange","e","Chip","key","classnames","color","component","clickable","List","dense","filteredTimers","filter","includes","name","toLowerCase","trim","isFavorite","line","url","removeFavorite","addFavorite","Typography"],"mappings":"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","file":"static/js/6.6884a7f6.chunk.js","sourcesContent":["\nexport const favoritesSelector = state => state.favorites || []\n","import { createSelector } from 'reselect'\n\nimport { map, assign } from 'lodash-es'\n\nexport const timersAsObjectSelector = state => state.timers || {}\n\nexport const timersSelector = createSelector(\n    timersAsObjectSelector,\n    timersObject => map(timersObject, (timer, id) => assign(timer, { id: id }))\n)\n","import React from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport Avatar from '@material-ui/core/Avatar'\nimport IconButton from '@material-ui/core/IconButton'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        width: \"100%\"\n    },\n    avatar: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    image: {\n        display: \"block\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"50% 50%\"\n    },\n    time: {\n        alignItems: \"baseline\",\n        \"& *\": {\n            marginRight: \"0.1em\"\n        }\n    }\n}))\n\nexport function Timer({\n    image = \"\",\n    title = \"\",\n    subtitle = \"\",\n    suptitle = \"\",\n    label = \"\",\n    link = \"#\",\n    time = 0,\n    icon,\n    onClick\n}) {\n\n    const classes = useStyles()\n\n    return (\n        <ListItem title={`${suptitle} - ${title} - ${subtitle}`}>\n\n            <ListItemAvatar>\n                <Avatar className={classes.avatar}>\n                    <a className={classes.image} style={{ backgroundImage: `url(${image})` }} href={link} target=\"_blank\" rel=\"noopener noreferrer\"> </a>\n                </Avatar>\n            </ListItemAvatar>\n\n            <ListItemText primary={title} secondary={subtitle} />\n\n            <ListItemSecondaryAction>\n\n                <IconButton className={classes.time}>\n                    <Typography variant=\"h4\">{time}</Typography>\n                    <Typography variant=\"subtitle2\">min</Typography>\n                </IconButton>\n\n                <IconButton\n                    edge=\"end\" aria-label=\"favorite\" title={label}\n                    onClick={onClick}\n                >\n                    {icon}\n                </IconButton>\n\n            </ListItemSecondaryAction>\n\n        </ListItem>\n    )\n}\n","import { createSelector } from 'reselect'\n\nimport { uniq, map } from 'lodash-es'\n\nimport { timersSelector } from './timers'\n\nexport const producersSelector = createSelector(\n    timersSelector,\n    timers => uniq(map(timers, timer => timer.producer))\n)\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport classnames from 'classnames'\n\nimport { includes } from 'lodash-es'\n\nimport { useTranslation } from 'react-i18next'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport List from '@material-ui/core/List'\nimport TextField from '@material-ui/core/TextField'\nimport Chip from '@material-ui/core/Chip'\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\n\nimport { timersSelector } from '../selectors/timers'\nimport { favoritesSelector } from '../selectors/favorites'\nimport { producersSelector } from '../selectors/producers'\n\nimport {\n    addFavorite,\n    removeFavorite,\n} from '../actions'\n\nimport { Timer } from '../components/Timer'\n\nconst useStyles = makeStyles(theme => ({\n    chip: {\n        opacity: 0.5,\n        margin: \"0 0.5em\",\n        \"&.active\": {\n            opacity: 1\n        }\n    }\n}))\n\nexport default function Preferences() {\n\n    const classes = useStyles()\n\n    const { t } = useTranslation()\n\n    const dispatch = useDispatch()\n\n    const timers = useSelector(timersSelector)\n    const favorites = useSelector(favoritesSelector)\n    const producers = useSelector(producersSelector)\n\n    const [searchValue, setSearchValue] = useState(\"\")\n    const [selectValue, setSelectValue] = useState(\"\")\n\n    return (\n        timers.length\n        ?\n        <>\n            <TextField\n                label={t(\"timers.search\")}\n                style={{ margin: 16 }}\n                placeholder={t(\"timers.example\")}\n                fullWidth\n                margin=\"normal\"\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                value={searchValue}\n                onChange={e => setSearchValue(e.target.value)}\n            />\n            {\n                producers\n                    .map(producer => (\n                        <Chip\n                            key={producer}\n                            className={classnames(classes.chip, !selectValue || producer === selectValue ? \"active\" : \"\")}\n                            color=\"primary\"\n                            label={producer} title={t(\"timers.select\")}\n                            component=\"a\" href={`#${producer}`} clickable\n                            onClick={e => setSelectValue(producer !== selectValue ? producer : \"\")}\n                        />\n                    ))\n            }\n            <List dense>\n                {\n                    (() => {\n\n                        let filteredTimers = timers\n                            .filter(timer => !searchValue || includes(timer.name.toLowerCase(), searchValue.toLowerCase().trim()))\n                            .filter(timer => !selectValue || timer.producer === selectValue)\n\n                        return (\n                            filteredTimers.length\n                            ?\n                            filteredTimers\n                                .map(timer => {\n                                    let isFavorite = includes(favorites, timer.id)\n                                    return (\n                                        <Timer\n                                            key={timer.id}\n                                            image={timer.image}\n                                            title={timer.name}\n                                            subtitle={timer.producer}\n                                            suptitle={timer.line}\n                                            label={isFavorite ? t(\"favorites.remove\") : t(\"favorites.add\")}\n                                            link={timer.url}\n                                            time={timer.time}\n                                            icon={isFavorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}\n                                            onClick={e => dispatch(isFavorite ? removeFavorite(timer.id) : addFavorite(timer.id))}\n                                        />\n                                    )\n                                })\n                            :\n                            <Typography>{t(\"timers.none\")}</Typography>\n                        )\n                    })()\n                }\n            </List>\n        </>\n        :\n        <Typography>{t(\"timers.none\")}</Typography>\n    )\n\n}\n"],"sourceRoot":""}